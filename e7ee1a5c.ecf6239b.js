(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{103:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=n.a.createContext({}),b=function(e){var t=n.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=b(e.components);return n.a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=b(r),d=a,m=p["".concat(o,".").concat(d)]||p[d]||s[d]||i;return r?n.a.createElement(m,l(l({ref:t},u),{},{components:r})):n.a.createElement(m,l({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},95:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return c})),r.d(t,"Highlight",(function(){return u})),r.d(t,"default",(function(){return p}));var a=r(2),n=r(6),i=(r(0),r(103)),o={id:"air_daily_qualityMod",title:"Air Daily Quality Module",sidebar_label:"Air Daily Quality Module"},l={unversionedId:"air_daily_qualityMod",id:"air_daily_qualityMod",isDocsHomePage:!1,title:"Air Daily Quality Module",description:"The file shows the functions that register and request data related to the Air Daily Quality table.",source:"@site/APIresources/data.air_daily_quality.md",permalink:"/qAIRa.github.io/APIresources/air_daily_qualityMod",sidebar_label:"Air Daily Quality Module",sidebar:"APIresources",previous:{title:"qHAWAX Installation History Module",permalink:"/qAIRa.github.io/APIresources/qhawax_installation_historyMod"},next:{title:"Air Quality Module",permalink:"/qAIRa.github.io/APIresources/air_qualityMod"}},c=[],u=function(e){var t=e.children,r=e.color;return Object(i.b)("span",{style:{backgroundColor:r,borderRadius:"2px",color:"#000000",padding:"0.2rem"}},t)},b={rightToc:c,Highlight:u};function p(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The file shows the functions that register and request data related to the Air Daily Quality table."),Object(i.b)("h4",{id:"air_daily_qualitystoreairdailydata"},Object(i.b)(u,{color:"#b2e4f7",mdxType:"Highlight"},"air_daily_quality.storeAirDailyData()")),Object(i.b)("p",null,"Air Daily Measurement function to record daily average measurement."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Parameters")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"data_jason")," (",Object(i.b)("em",{parentName:"li"},"json"),") - json of daily average measurement")),Object(i.b)("h4",{id:"air_daily_qualitygetairdailymeasurementstimeperiod"},Object(i.b)(u,{color:"#b2e4f7",mdxType:"Highlight"},"air_daily_quality.getAirDailyMeasurementsTimePeriod()")),Object(i.b)("p",null,"Air Daily Measurement function to get daily average measurement based on week number and year."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Parameters")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"qhawax_id")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - qHAWAX ID")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"init_week")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - initial week number")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"init_year")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - initial year")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"end_week")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - last week number")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"end_year")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - end year"))))}p.isMDXComponent=!0}}]);